UNIT-4

1) Delegate
	- Delegate in a C# is a powerful concept that allows method to be passed as parameters, stored in variables and called dynamically
	- Delegate is a type safe function pointer that holds the method reference in an object.
	- The reference of method in delegate changed dynamically.
	- It enforces type safety: meaning only methods with same signature can be store.

	USE:
	   - Delegate helps in code optimization 
	   - Delegate can be used to call method asynchronously
	   - It encapsulate  method call from caller
	   - Efficient use of delegate improve the performance of application
	   - Event Handiling
	
	SYNTAX:
	<access_modifier> delegate <return_type_of_delegate> <delegate_name> (<parameter>);

	TYPES of Delegate:
	There are two types of delegate. They are:
		1) Single Cast Delegate
		2) Multi Cast Delegate

	i) Single Cast Delegate:
		It holds or points the reference of single method at a time
		It is inherited from System.Delegate Class

		Step to perform delegate in our application
		1) Define method
		2) Define Delegate
		3) create instance of Delegate
		4) call or invoke method via delegate

	ii) Multi Cast Delegate:
		When delegate wrapped with the reference of more than one method, then this delegate is know as multicast delegate
		Multicast delegates points or holds the reference of multiple method at a time
		Multicast delegate is inherited from System.MulticastDelegate
		We have to use + or += operator to bind reference of multiple method in delegate and use - or -= to remove reference of method from delegate


2) Inline Method
	- An inline method is any method that is directly defined at the point of use instead of creating a named method separately. It is mainly used with delegates, events and LINQ

	There are two ways to represent inline method:
		- Anonymous Method
		- Lambda Expression

	i) Anonymous Method
		- Anonymous Method provides the technique to pass block of code i.e. method definition as delegate parameter.
		- Anonymous Method is a method without a name, but having body and declared when create instance of delegate using delegate keyword.

	SYNTAX:
	<delegate_type> <variable_name> = delegate(parameters) {
		//method name
	}

	ii) Lambda Expression
		- Lambda is shorter, cleaner way to write anonymous methods using the => (lambda operator).
		- Lambda Expression is composed of function parameter, lambda operator(=>) and expression or sequence statement
	SYNTAX:
		(<parameters>) => expression;

	There are two type of lambda expression:
	i) Expression Lambda
		It contains only single line expression
		eg: (<parameters>) => expression;

	ii) Statement Lambda
		It contains sequences of statement enclosed with {} braces
		eg: (<parameters>) => {statements};


3) Generic Delegate
	-> A generic delegate is a predefined delegate that can work with any data type, because it uses generics <T>. It saves us from writing new delegate definitions each time.

	There are three types of generic delegate define in System namespace:
		i) Func delegate
		ii) Action delegate
		iii) Predicate delegate


	i) Func Delegate
		- Func delegate represents zero, one or more input parameter and only one return output value method.
		SYNTAX:	Func<in t1, in t2 ..., in t16, out tres>();
	
	ii) Action Delegate 
		- Action delegate represents zero, one or more input parameter and nothing to return method.
		SYNTAX: Action<in T1, in T2 ..., in T16>();

	iii) Predicate Delegate
		- Predicate delegate is used to check certain codition for a input parameter and return Boolean value method
		SYNTAX: Predicate <in T>();
